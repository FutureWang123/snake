AC_INIT(lcdimg.c)

AC_PROG_CC
AC_ISC_POSIX
AC_PROG_INSTALL

AC_CACHE_CHECK(whether ${CC-cc} accepts -mlongcall, cv_prog_cc_mlongcall,
[echo 'void f(){}' > conftest.c
if test -z "`${CC-cc} -mlongcall -c conftest.c 2>&1`"; then
  cv_prog_cc_mlongcall=yes
else
  cv_prog_cc_mlongcall=no
fi
rm -f conftest*
])

if test "x$cv_prog_cc_mlongcall" = "xyes"; then
  CFLAGS="$CFLAGS -mlongcall"
else
  :
fi

AC_PATH_XTRA

AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h getopt.h limits.h errno.h    dnl
		 utime.h SDL/SDL.h SDL/SDL_audio.h)
AC_CHECK_LIB(SDL, SDL_Init)
AC_CHECK_FUNC(SDL_OpenAudio)

AC_C_CONST
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM

need_to_check_timezone=no
AC_MSG_CHECKING([number of arguments to gettimeofday])
AC_TRY_LINK([
#include <stdlib.h>
#ifdef TIME_WITH_SYS_TIME
#include <sys/time.h>
#include <time.h>
#else
#ifdef HAVE_SYS_TIME_H
#include <sys/time.h>
#else
#include <time.h>
#endif
#endif
],[
  struct timeval tp;
  struct timezone tz;
  gettimeofday(&tp, &tz);
], AC_DEFINE(BSD_STYLE_GETTIMEOFDAY)
AC_MSG_RESULT([2])
need_to_check_timezone=yes, AC_MSG_RESULT([1]))

if test x"$need_to_check_timezone" = xyes; then
  AC_MSG_CHECKING([type of second argument to gettimeofday])
  AC_TRY_LINK([
#include <stdlib.h>
#ifdef TIME_WITH_SYS_TIME
#include <sys/time.h>
#include <time.h>
#else
#ifdef HAVE_SYS_TIME_H
#include <sys/time.h>
#else
#include <time.h>
#endif
#endif
],[
    struct timeval tp;
    struct timezone tz;
    extern int gettimeofday(struct timeval *, struct timezone *);
    gettimeofday(&tp, &tz);
  ], AC_MSG_RESULT([struct timezone *]), AC_DEFINE(TIMEZONE_IS_VOID)
AC_MSG_RESULT([void *]))
else
  :
fi

if test x"$ac_cv_header_SDL_SDL_h$ac_cv_header_SDL_SDL_audio_h$ac_cv_func_SDL_OpenAudio" = xyesyesyes; then
  AC_DEFINE(USE_SDL_AUDIO)
else
  :
fi

AC_OUTPUT(Makefile)
